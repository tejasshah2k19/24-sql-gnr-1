
Table: Customer 
customer_id |   cust_name    |    city    | grade | salesman_id 
-------------+----------------+------------+-------+-------------
        3002 | Nick Rimando   | New York   |   100 |        5001
        3007 | Brad Davis     | New York   |   200 |        5001
        3005 | Graham Zusi    | California |   200 |        5002
        3008 | Julian Green   | London     |   300 |        5002
        3004 | Fabian Johnson | Paris      |   300 |        5006
        3009 | Geoff Cameron  | Berlin     |   100 |        5003
        3003 | Jozy Altidor   | Moscow     |   200 |        5007
        3001 | Brad Guzan     | London     |       |        5005



exact match 
select * from customer where city = 'Moscow'; 


regEx partial match 
list out all the customers who lives in city which starting letter is 'M' 
list out all the customers who lives in city which starting letter is 'Mo'
start with 'm' and ends with 'z' 
it contains m in any position 


1)start 
2)end 
3)any 


use : => wild card 
total we have 6 wild card  characters in sql {oracle,mysql,postgres,mssql}

%  : 0 or N characters 
_  : 1 , single character
[] : [abc] character set - any single character from bracket {oracle,mssql} 
^  : negative , not {oracle,mssql}
-  : range [a-f]  {oracle,mssql} 


1) % -> 0 or N character(s)
customer name start with 'A' -> AXXXXX  : correct 
                             -> A       : correct 
                             -> XXAXXXX : incorrect 
                        'A%'

customer name ends with 'A'  ->XXXXXXA 
                        '%A'

customer name contains A    -> XXXAXXX 
                            -> A 
                            -> AXA 
                            -> XXA
                            -> AXX 
                        '%A%'

2) _ => underscore -> single character 

customer name contains second and fourth letter 'A'
                                              '_A_A%'
customer name who's name end with A and second character is B 
                                               '_B%A'
city name start with 'S' and having any 2 characters and end with 'AT';
                                                'S__%AT'
 

question:=>
customer who's name start with [vowel] => a e i o u
select * from customers where name like 'a%' or name like 'e%' or name like 'i%'; 


3) [] , character set 
customer who's name start with [vowel] => a e i o u
select * from customers where name like '[aeiou]%';

customer who's name start with abcdefghijklmno 
select * from customers where name like '[abcdefghijklmno]%';



4) - , range 
customer who's name start with abcdefghijklmno 
select * from customers where name like '[a-o]%';


5)^ , negative , not , negation 
customer who's name does not start with vowel 
select * from customers where name like '^[aeiou]%';


-----------------------------------------------------------------------------------------------------------
add more record in customer table :- 
INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4001, 'John', 'Paris', 300, 5006);

INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4002, 'Jay', 'Paris', 300, 5006);

INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4003, 'Ji', 'Paris', 300, 5006);

INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4004, 'Jo', '1st-Avenue', 300, 5006);

INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4005, 'Jason', '4th-Street', 300, 5006);

INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4006, 'Julian', 'Rio-de-Janeiro', 300, 5006);

INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4007, 'Mar2k', 'New-York', 300, 5006);
 

INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4008, 'Alice1', 'New-York', 300, 5006);
 

INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4009, 'Alice%John', 'New-York', 300, 5006);



INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4010, 'Alice_John', 'New-York', 300, 5006);


INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4010, 'J_ohn', 'New-York', 300, 5006);


INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4011, 'Nina', 'New-York', 300, 5006);



INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4012, 'Bob', 'New-York', 300, 5006);


INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4013, 'Ana', 'New-York', 300, 5006);


INSERT INTO Customer (customer_id, cust_name, city, grade, salesman_id) 
VALUES (4014, 'Eustacio', 'Eustacio', 300, 5006);



1)Find customers whose names start with J and have any single character after it:
This matches names like Jo, or Ji but not John.
SELECT * 
FROM Customer 
WHERE CustomerName LIKE 'J_';


2) Find customers whose names start with J and end with n with any number of characters in between
This matches names like John, Jason, or Julian.
SELECT * 
FROM Customer 
WHERE CustomerName LIKE 'J%n';


3) Find customers whose names have exactly 4 characters:
This matches names like John, Paul, or Mark.
SELECT * 
FROM Customer 
WHERE CustomerName LIKE '____';


4)Find customers whose city name includes a dash (-):
This matches cities like New-York or Rio-de-Janeiro.
SELECT * 
FROM Customer 
WHERE City LIKE '%-%';

5)Find customers whose names include a character range (A to C):
This matches names like Alice, Bob, or Charlie.
SELECT * 
FROM Customer 
WHERE CustomerName LIKE '[A-C]%';

6) Find customers whose names include any character not in a specified range ( not A to C):
This excludes names like Alice, Bob, or Charlie.
SELECT * 
FROM Customer 
WHERE CustomerName LIKE '[^A-C]%';

7)Find customers whose phone numbers contain a dash (-):
This matches phone numbers like 123-456-7890.
SELECT * 
FROM Customer 
WHERE Phone LIKE '%-%';

8) Find customers whose city name starts with a digit:
This matches cities like 1st-Avenue or 4th-Street.
SELECT * 
FROM Customer 
WHERE City LIKE '[0-9]%';

9) Find customers whose names include a percent sign (%):
This matches names like John%Smith.
SELECT * 
FROM Customer 
WHERE CustomerName LIKE '%\%%' ESCAPE '\';

10) Find customers whose names include an underscore (_):
This matches names like J_Parker.
SELECT * 
FROM Customer 
WHERE CustomerName LIKE '%\_%' ESCAPE '\';



Harder 
-----------------------------------------------------------------------------------------------------------
1)Find customers whose names have alternating consonants and vowels (e.g., Joanna, Nina)
This matches names with a pattern of consonant-vowel pairs.
SELECT * 
FROM Customer 
WHERE CustomerName LIKE '[B-DF-HJ-NP-TV-Z][AEIOU][B-DF-HJ-NP-TV-Z][AEIOU]%';


2)Find customers whose names contain at least one digit (e.g., John3, A1ice):
This matches names containing numeric characters anywhere.
SELECT * 
FROM Customer 
WHERE CustomerName LIKE '%[0-9]%';


3)Find customers whose city names end with a digit followed by exactly two letters
This matches cities like Area7NY, Zone3US.
SELECT * 
FROM Customer 
WHERE City LIKE '%[0-9]__[A-Za-z][A-Za-z]';

need to use string function --> 
4)Find customers whose names start and end with the same letter, with any characters in between:
This dynamically matches names like Anna, Bob, or SteveS. (Requires a database with CONCAT and SUBSTR support.)
SELECT * 
FROM Customer 
WHERE CustomerName LIKE CONCAT(SUBSTR(CustomerName, 1, 1), '%', SUBSTR(CustomerName, 1, 1));

5)Find customers whose names have a palindrome structure (e.g., Anna, Bob):
 This identifies palindromic names. Requires support for the REVERSE function.
SELECT * 
FROM Customer 
WHERE CustomerName = REVERSE(CustomerName);

6)Find customers whose names contain all vowels at least once (a, e, i, o, u):
 This matches names like Eustacio or Aurelio.
SELECT * 
FROM Customer 
WHERE CustomerName LIKE '%a%' 
  AND CustomerName LIKE '%e%' 
  AND CustomerName LIKE '%i%' 
  AND CustomerName LIKE '%o%' 
  AND CustomerName LIKE '%u%';
 
 ---------------------------------------------------------------------------------------------------------












